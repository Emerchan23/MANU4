import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // Proteger rota de configura√ß√µes apenas para admin
  if (pathname.startsWith('/configuracoes')) {
    console.log('üîç Middleware - Verificando acesso √† rota:', pathname);
    
    // Verificar se o usu√°rio est√° autenticado e √© admin
    const userCookie = request.cookies.get('user')
    console.log('üç™ Middleware - Cookie encontrado:', userCookie ? 'SIM' : 'N√ÉO');
    
    if (!userCookie) {
      console.log('‚ùå Middleware - Cookie n√£o encontrado, redirecionando para login');
      // Redirecionar para login se n√£o autenticado
      return NextResponse.redirect(new URL('/login', request.url))
    }

    try {
      const user = JSON.parse(userCookie.value)
      console.log('üë§ Middleware - Dados do usu√°rio:', {
        name: user.name || user.username,
        role: user.role,
        isAdmin: user.isAdmin
      });
      
      // Verificar se √© admin
      if (!user.isAdmin && user.role !== 'ADMIN') {
        console.log('‚ùå Middleware - Usu√°rio n√£o √© admin, redirecionando para dashboard');
        // Redirecionar para dashboard se n√£o for admin
        return NextResponse.redirect(new URL('/', request.url))
      }
      
      console.log('‚úÖ Middleware - Acesso autorizado para admin');
    } catch (error) {
      console.error('‚ùå Middleware - Erro ao parsear cookie:', error);
      // Se erro ao parsear cookie, redirecionar para login
      return NextResponse.redirect(new URL('/login', request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: [
    '/configuracoes/:path*'
  ]
}